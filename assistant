<?php

require_once __DIR__ . '/vendor/autoload.php';

use Stringy\Stringy;
use Atmosphere\View\View;
use Atmosphere\Core\Boot;
use Atmosphere\Support\Str;
use Nette\PhpGenerator\PhpFile;
use Atmosphere\Channel\Channel;
use Nette\PhpGenerator\ClassType;
use Atmosphere\Database\Model\Model;
use Atmosphere\Middleware\Middleware;
use Illuminate\Database\Capsule\Manager;
use Longman\TelegramBot\Entities\Update;
use Illuminate\Database\Schema\Blueprint;
use Atmosphere\Conversation\Conversation;
use Symfony\Component\Console\Application;
use Atmosphere\Database\Schema\TableSchema;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\ArrayInput;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\NullOutput;
use Atmosphere\Support\Traits\PropertyInjection;
use Atmosphere\Database\DatabaseServiceProvider;
use Symfony\Component\Console\Style\SymfonyStyle;
use Atmosphere\Conversation\PersistentProperties;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

// Class Makers
// ----------------------------------------------------------------------------------------
// interface HasProvider
// {
// 	/**
// 	 * @param string $component
// 	 *
// 	 * @return string
// 	 */
// 	public function prepareProvider ($component);
// }
//
// abstract class ClassMaker
// {
// 	/**
// 	 * @var string
// 	 */
// 	protected $componentDirectory;
//
// 	/**
// 	 * If has provider
// 	 *
// 	 * @var string
// 	 */
// 	protected $providerPath;
//
// 	/**
// 	 * Create component file and put it's content
// 	 *
// 	 * @param string $component
// 	 */
// 	final public function make ($component)
// 	{
// 		// put in provider
// 		if ( $this instanceof HasProvider )
// 			file_put_contents($this->providerPath, $this->prepareProvider($component));
//
// 		file_put_contents("$this->componentDirectory/$component.php", $this->prepare($component));
// 	}
//
// 	/**
// 	 * @param string $component
// 	 *
// 	 * @return string
// 	 */
// 	abstract protected function prepare ($component);
//
// 	/**
// 	 * @param array $array
// 	 *
// 	 * @return string
// 	 */
// 	final protected function convertArrayToString ($array)
// 	{
// 		array_walk($array, function (&$value, $index) {
// 			$value = (string) Stringy::create($value)->prepend("\n\t\\")->append("::class,");
// 		});
//
// 		return implode('', $array);
// 	}
// }
//
// class ModelMaker extends ClassMaker
// {
// 	protected $componentDirectory = 'app/Models';
//
// 	protected function prepare ($component)
// 	{
// 		$file = new PhpFile;
//
// 		$namespace = $file->addNamespace('Bot\App\Models')
// 						  ->addUse(Model::class);
//
// 		$class = $namespace->addClass($component)
// 						   ->setExtends(Model::class);
//
// 		$class->addProperty('guarded', [ 'id' ])->setProtected();
//
// 		return (string) $file;
// 	}
// }
//
// class SchemaMaker extends ClassMaker implements HasProvider
// {
// 	protected $componentDirectory = 'app/Schemas';
//
// 	protected function prepare ($component)
// 	{
// 		$file = new PhpFile;
//
// 		$namespace = $file->addNamespace('Bot\Database\Schemas')
// 						  ->addUse(TableSchema::class)
// 						  ->addUse(Blueprint::class)
// 						  ->addUse(Manager::class);
//
// 		$class = $namespace->addClass($component)
// 						   ->setExtends(TableSchema::class);
//
// 		$str = Str::getInstance();
// 		$table_name = $str->plural($str->snake($component));
//
// 		$class->addProperty('tableName', $table_name)->setProtected();
//
// 		$class->addMethod('up')
// 			  ->setComment('Schema definition')
// 			  ->setComment('@return void')
// 			  ->setPublic()
// 			  ->addBody('Manager::schema()->create($this->tableName, function (Blueprint $table) {')
// 			  ->addBody("\t\$table->id();")
// 			  ->addBody("\t\$table->timestamps();")
// 			  ->addBody('});');
//
// 		return (string) $file;
// 	}
//
// 	public function prepareProvider ($component)
// 	{
// 		$schemas = ( new ReflectionClass(\App\Kernel::class) )
// 			->getMethod('schemas')->invoke(null);
//
// 		$schemas = $this->convertArrayToString(array_merge($schemas, [ "App\\Schemas\\$component" ]));
//
// 		$body = "return [$schemas\n];";
//
// 		$file = new PhpFile;
// 		$file->addNamespace('Bot\Providers');
//
// 		$provider_class = ClassType::from(SchemaProvider::class);
// 		$provider_class->getMethod('register')->setBody($body);
//
// 		return $file . PHP_EOL . PHP_EOL . $provider_class;
// 	}
// }
//
// class ViewMaker extends ClassMaker
// {
// 	protected $componentDirectory = 'app/Views';
//
// 	protected function prepare ($component)
// 	{
// 		$file = new PhpFile;
//
// 		$namespace = $file->addNamespace('Bot\App\Views')
// 						  ->addUse(View::class)
// 						  ->addUse(PropertyInjection::class);
//
// 		$class = $namespace->addClass($component)
// 						   ->setExtends(View::class);
//
// 		$method = $class->addMethod('template')
// 						->addComment('The view template' . PHP_EOL)
// 						->addComment('@return void')
// 						->setProtected()
// 						->setBody('// $this->add();');
//
// 		return (string) $file;
// 	}
// }
//
// class MiddlewareMaker extends ClassMaker implements HasProvider
// {
// 	protected $componentDirectory = 'app/Middlewares';
// 	protected $providerPath = 'Providers/MiddlewareProvider.php';
//
// 	protected function prepare ($component)
// 	{
// 		$file = new PhpFile;
//
// 		$namespace = $file->addNamespace('Bot\App\Middlewares')
// 						  ->addUse(Middleware::class)
// 						  ->addUse(Update::class);
//
// 		$class = $namespace->addClass($component)
// 						   ->setExtends(Middleware::class);
//
// 		$method = $class->addMethod('allow')
// 						->addComment('Allow incoming update with specific condition' . PHP_EOL)
// 						->addComment('@return bool')
// 						->setPublic()
// 						->setBody('// return true if you want to allow');
//
// 		$method->addParameter('update')
// 			   ->setType(Update::class);
//
// 		return (string) $file;
// 	}
//
// 	public function prepareProvider ($component)
// 	{
// 		$middlewares = ( new ReflectionClass(MiddlewareProvider::class) )
// 			->getMethod('register')->invoke(null);;
//
// 		$middlewares = $this->convertArrayToString(array_merge($middlewares, [ "Bot\\app\\Middlewares\\$component" ]));
//
// 		$body = "return [$middlewares\n];";
//
// 		$file = new PhpFile;
// 		$file->addNamespace('Bot\Providers');
//
// 		$provider_class = ClassType::from(MiddlewareProvider::class);
// 		$provider_class->getMethod('register')->setBody($body);
//
// 		return $file . PHP_EOL . PHP_EOL . $provider_class;
// 	}
// }
//
// class ConversationMaker extends ClassMaker
// {
// 	protected $componentDirectory = 'app/Conversations';
//
// 	protected function prepare ($component)
// 	{
// 		$file = new PhpFile;
//
// 		$namespace = $file->addNamespace('Bot\App\Conversations')
// 						  ->addUse(Conversation::class)
// 						  ->addUse(Update::class)
// 						  ->addUse(JsonSerializable::class)
// 						  ->addUse(PersistentProperties::class);
//
// 		$class = $namespace->addClass($component)
// 						   ->setExtends(Conversation::class)
// 						   ->addImplement(JsonSerializable::class)
// 						   ->addTrait(PersistentProperties::class);
//
// 		$class->addMethod('onConversationStart')
// 			  ->addComment('Executes when conversation starts' . PHP_EOL)
// 			  ->addComment('@return void')
// 			  ->setPublic()
// 			  ->setBody('// response() or something else');
//
// 		$method = $class->addMethod('onConversationEnd')
// 						->addComment('Executes when conversation is finished' . PHP_EOL)
// 						->addComment('@param Update $last_update' . PHP_EOL)
// 						->addComment('@return void')
// 						->setPublic()
// 						->setBody('// response() or something else');
//
// 		$method->addParameter('last_update')
// 			   ->setType(Update::class);
//
// 		return (string) $file;
// 	}
// }
//
// class ChannelMaker extends ClassMaker
// {
// 	protected $componentDirectory = 'app/Channels';
//
// 	protected function prepare ($component)
// 	{
// 		$file = new PhpFile;
//
// 		$namespace = $file->addNamespace('Bot\App\Channels')
// 						  ->addUse(Channel::class);
//
// 		$class = $namespace->addClass($component)
// 						   ->setExtends(Channel::class);
//
// 		$class->addProperty('channelID')
// 			  ->setProtected()
// 			  ->setStatic()
// 			  ->setValue('@YOUR_CHANNEL_ID');
//
// 		return (string) $file;
// 	}
// }

// ----------------------------------------------------------------------------------------

// Make Commands
// ----------------------------------------------------------------------------------------
// abstract class MakeComponent extends Command
// {
// 	protected $description;
//
// 	/**
// 	 * @var ClassMaker
// 	 */
// 	protected $maker;
//
// 	protected function configure ()
// 	{
// 		$this->setDescription($this->description);
// 		$this->addArgument('names', InputArgument::IS_ARRAY, 'name/names');
// 		$this->addUsage('Foo');
// 		$this->addUsage('Foo Bar');
// 	}
//
// 	protected function execute (InputInterface $input, OutputInterface $output)
// 	{
// 		$io = new SymfonyStyle($input, $output);
// 		$components = $input->getArgument('names');
//
// 		if ( empty($components) )
// 		{
// 			$io->error('No name/names found');
// 			return Command::FAILURE;
// 		}
//
// 		foreach ( $components as $component )
// 		{
// 			$this->callMaker($component, $input);
// 		}
//
// 		$io->success('Done.');
// 		return Command::SUCCESS;
// 	}
//
// 	protected function callMaker ($component, InputInterface $input)
// 	{
// 		( new $this->maker )->make($component);
// 	}
// }
//
// class MakeScenario extends MakeComponent
// {
// 	protected static $defaultName = 'make:scenario';
// 	protected $description = 'Make a new scenario';
// 	protected $maker = ScenarioMaker::class;
// }
//
// class MakeSubScenario extends MakeComponent
// {
// 	protected static $defaultName = 'make:sub-scenario';
// 	protected $description = 'Make a new sub scenario';
// 	protected $maker = SubScenarioMaker::class;
// }
//
// class MakeCondition extends MakeComponent
// {
// 	protected static $defaultName = 'make:condition';
// 	protected $description = 'Make a new condition';
// 	protected $maker = ConditionMaker::class;
// }
//
// class MakeModel extends MakeComponent
// {
// 	protected static $defaultName = 'make:model';
// 	protected $description = 'Make a new model';
//
// 	protected function configure ()
// 	{
// 		$this->addOption('schema', 's', InputOption::VALUE_NONE,
// 			'Make schema with the model');
// 		parent::configure();
// 	}
//
// 	protected function callMaker ($component, InputInterface $input)
// 	{
// 		if ( $input->getOption('schema') )
// 		{
// 			$command = $this->getApplication()->find('make:schema');
//
// 			$arguments = [
// 				'names' => [ $component ],
// 			];
//
// 			$greetInput = new ArrayInput($arguments);
// 			$command->run($greetInput, new NullOutput);
// 		}
//
// 		( new ModelMaker )->make($component);
// 	}
// }
//
// class MakeSchema extends MakeComponent
// {
// 	protected static $defaultName = 'make:schema';
// 	protected $description = 'Make a new schema';
// 	protected $maker = SchemaMaker::class;
// }
//
// class MakeView extends MakeComponent
// {
// 	protected static $defaultName = 'make:view';
// 	protected $description = 'Make a new view';
// 	protected $maker = ViewMaker::class;
// }
//
// class MakeMiddleware extends MakeComponent
// {
// 	protected static $defaultName = 'make:middleware';
// 	protected $description = 'Make a new middleware';
// 	protected $maker = MiddlewareMaker::class;
// }
//
// class MakeConversation extends MakeComponent
// {
// 	protected static $defaultName = 'make:conversation';
// 	protected $description = 'Make a new conversation';
// 	protected $maker = ConversationMaker::class;
// }
//
// class MakeChannel extends MakeComponent
// {
// 	protected static $defaultName = 'make:channel';
// 	protected $description = 'Make a new channel';
// 	protected $maker = ChannelMaker::class;
// }

class InitCommand extends Command
{
	protected static $defaultName = 'init';
	
	private $patterns = [
		'app/Channels',
		'app/Controllers',
		'app/Conversations',
		'app/Keyboards',
		'app/Middlewares',
		'app/Models',
		'app/Schemas',
		'app/Views',
	];
	
	protected function configure ()
	{
		$this->setDescription('initialize app directory');
	}
	
	protected function execute (InputInterface $input, OutputInterface $output)
	{
		$style = new SymfonyStyle($input, $output);
		
		$style->title('Checking app Directory');
		
		foreach ( $this->patterns as $pattern )
		{
			if ( file_exists($pattern) )
			{
				$style->warning("$pattern already exists, so skipped...");
			}
			else
			{
				mkdir($pattern, 0777, true);
				$style->success("$pattern created successfully");
			}
		}
		
		return self::SUCCESS;
	}
}

class DatabaseBuild extends Command
{
	protected static $defaultName = 'database:build';
	
	protected function configure ()
	{
		$this->setDescription('build database tables using schemas');
	}
	
	protected function execute (InputInterface $input, OutputInterface $output)
	{
		$io = new SymfonyStyle($input, $output);
		
		$this->build_database();
		
		$io->success('database built successfully');
		
		return Command::SUCCESS;
	}
	
	private function build_database ()
	{
		Boot::loadConfig(__DIR__)->turnOn(new \App\Kernel);
		app()->call([DatabaseServiceProvider::class, 'build'], ['rebuild' => false]);
	}
}

class DatabaseRebuild extends Command
{
	protected static $defaultName = 'database:rebuild';
	
	protected function configure ()
	{
		$this->setDescription('rebuild database tables using schemas');
	}
	
	protected function execute (InputInterface $input, OutputInterface $output) : int
	{
		$io = new SymfonyStyle($input, $output);
		$choice = $io->choice('Are you sure?', [ 'yes', 'no' ], 'no');
		
		if ( $choice == 'no' )
			return Command::FAILURE;
		
		$this->rebuild_database();
		
		$io->success('database rebuilt successfully');
		
		return Command::SUCCESS;
	}
	
	private function rebuild_database ()
	{
		Boot::loadConfig(__DIR__)->turnOn(new \App\Kernel);
		app()->call([DatabaseServiceProvider::class, 'build'], ['rebuild' => true]);
	}
}

// ----------------------------------------------------------------------------------------
$app = new Application('atmosphere Assistant');

$app->addCommands([
	// new MakeMiddleware(),
	// new MakeScenario(),
	// new MakeSubScenario(),
	// new MakeCondition(),
	// new MakeModel(),
	// new MakeSchema(),
	// new MakeView(),
	// new MakeConversation(),
	// new MakeChannel(),
	new InitCommand(),
	new DatabaseBuild(),
	new DatabaseRebuild(),
]);

$app->run();
